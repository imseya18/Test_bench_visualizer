
stages:
  - test
  - build

variables:
  NODE_VERSION: "20"          
  PNPM_VERSION: "latest"
  GIT_DEPTH: "0"             

# ----------------------------------
#   Unit tests (Linux Docker)
# ----------------------------------
unit_tests:
  stage: test
  image: node:${NODE_VERSION}
  rules:
    
    
    - changes:
        - src/**/*
        - src-tauri/**/*
        - tests/**/*
        - package-lock.json
        - src-tauri/Cargo.lock
        - .github/workflows/test-build.yml
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
  before_script:
    # Enable & install pnpm via Corepack (ships with Node ≥16.19)
    - corepack enable && corepack prepare pnpm@${PNPM_VERSION} --activate
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ~/.local/share/pnpm
      - node_modules/
  script:
    - pnpm install --frozen-lockfile
    - pnpm jest
  artifacts:
    when: on_failure
    reports:
      junit: junit.xml

# ----------------------------------
#   Build template (shared steps)
# ----------------------------------
.build_template:
  image: node:${NODE_VERSION}
  stage: build
  needs: ["unit_tests"]
  before_script:
    # --- PNPM & dependencies ---
    - corepack enable && corepack prepare pnpm@${PNPM_VERSION} --activate
    - pnpm -v
    # --- Rust + Tauri CLI ---
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    - source "$HOME/.cargo/env"
    - cargo install tauri-cli --locked
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ~/.cargo/registry
      - ~/.cargo/git
      - src-tauri/target/
  artifacts:
    when: always
    paths:
      - src-tauri/target/release/bundle/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"


# ----------------------------------
#   Linux build (Ubuntu 22.04)
# ----------------------------------
build_tauri_linux:
  extends: .build_template
  variables:
    ARGS: ""
  script:
    
    - apt-get update
    - apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev xdg-utils
    - pnpm install --frozen-lockfile
    - pnpm tauri build ${ARGS}



# ----------------------------------
#   Android build (APK + AAB)
# ----------------------------------
.build_android_template:
  image: ghcr.io/cirruslabs/android-sdk:34    # docker image with android sdk & ndk pre‑installed.
  variables:
    ANDROID_HOME: /opt/android-sdk-linux
    
  before_script:
    # === Install Node.js & PNPM ===
    - apt-get update -y && apt-get install -y curl ca-certificates gnupg
    - curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
    - apt-get install -y nodejs
    - npm install -g pnpm@${PNPM_VERSION:-8}

    # === Rust toolchain & Tauri CLI ===
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    - source "$HOME/.cargo/env"
    - cargo install tauri-cli --locked

    # === Mobile targets for Rust ===
    - rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

    # === Update PATHS ===
    - export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH"
      
    - sdkmanager "platforms;android-34" "build-tools;35.0.0" "ndk;28.2.13676358"
    - export NDK_VERSION=$(ls $ANDROID_HOME/ndk | sort -V | tail -n1)
    - export NDK_HOME="$ANDROID_HOME/ndk/$NDK_VERSION"
    - echo "NDK_HOME = $NDK_HOME"
    - echo "$KEYSTORE_B64" | base64 -d > upload-keystore.jks
    - | 
      cat > src-tauri/gen/android/keystore.properties <<EOF
      keyAlias=$KEY_ALIAS
      password=$KEYSTORE_PASS
      storeFile=${CI_PROJECT_DIR}/upload-keystore.jks
      EOF
  artifacts:
    paths:
      - src-tauri/gen/android/app/build/outputs
    expire_in: 1 week


build_tauri_android:
  extends: .build_android_template
  stage: build
  script:
    - pnpm install --frozen-lockfile
    - pnpm tauri android build 